# -*- coding: utf-8 -*-
"""Aitask8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rcM4vAeYCuCNcysE7Iz-Hm11J-qo2Oqs
"""

# Constants
NUM_BOATS = 10
HOURLY_RATE = 20
HALF_HOUR_RATE = 12
OPENING_HOUR = 10
CLOSING_HOUR = 17

# Initialize boat data
boats_data = [{'hours_hired': 0, 'return_time': None} for _ in range(NUM_BOATS)]

# Function to calculate money taken for one boat
def calculate_money_for_one_boat(boat_number, hire_duration):
    if not (OPENING_HOUR <= hire_duration <= CLOSING_HOUR):
        print("Boat can only be hired between 10:00 and 17:00.")
        return

    if boats_data[boat_number - 1]['return_time'] is not None:
        print(f"Boat {boat_number} is already hired until {boats_data[boat_number - 1]['return_time']}.")
        return

    if hire_duration % 0.5 != 0:
        print("Invalid hire duration. Please choose either 0.5 or 1 hour increments.")
        return

    cost = HOURLY_RATE if hire_duration == 1 else HALF_HOUR_RATE
    boats_data[boat_number - 1]['hours_hired'] += hire_duration
    return_time = OPENING_HOUR + boats_data[boat_number - 1]['hours_hired']
    boats_data[boat_number - 1]['return_time'] = min(return_time, CLOSING_HOUR)

    return cost

# Function to find the next available boat
def find_next_available_boat(current_time):
    available_boats = [i + 1 for i, data in enumerate(boats_data) if data['return_time'] is None]

    if not available_boats:
        next_return_time = min(data['return_time'] for data in boats_data)
        print(f"No boats available. Next boat will be available at {next_return_time}:00.")
    else:
        print(f"Available boats: {', '.join(map(str, available_boats))}.")

# Function to calculate money taken for all boats at the end of the day
def calculate_money_for_all_boats():
    total_money_taken = sum(data['hours_hired'] * HOURLY_RATE if data['return_time'] is not None else 0 for data in boats_data)
    total_hours_hired = sum(data['hours_hired'] for data in boats_data)
    unused_boats = sum(1 for data in boats_data if data['return_time'] is None)
    most_used_boat = max(range(1, NUM_BOATS + 1), key=lambda i: boats_data[i - 1]['hours_hired'])

    print("\nEnd of Day Report:")
    print(f"Total money taken: ${total_money_taken:.2f}")
    print(f"Total hours boats were hired: {total_hours_hired} hours")
    print(f"Boats not used today: {unused_boats}")
    print(f"Most used boat: Boat {most_used_boat} ({boats_data[most_used_boat - 1]['hours_hired']} hours)")

# Test Task 1
boat_number = int(input("Enter boat number (1 to 10): "))
hire_duration = float(input("Enter hire duration (0.5 or 1 hour): "))
money_taken = calculate_money_for_one_boat(boat_number, hire_duration)
if money_taken is not None:
    print(f"Money taken for Boat {boat_number}: ${money_taken:.2f}")

# Test Task 2
current_time = float(input("Enter current time: "))
find_next_available_boat(current_time)

# Test Task 3
calculate_money_for_all_boats()

